<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\BorrowRequest;
use App\Models\AssetMain;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\BorrowExport;

class BorrowRequestController extends Controller
{
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    public function index(Request $request)
    {
        $assets = AssetMain::all();
        $query = BorrowRequest::with('asset');
        if ($request->filled('status')) {
            $query->where('status', $request->status);
        }
        $borrowRequests = $query->orderBy('borrow_date', 'desc')->get();

        return view('borrow.storeborrowrequest', compact('borrowRequests', 'assets'));
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
    public function borrowList(Request $request)
    {
        $statusFilter = $request->get('status', 'all');

        $countPending = BorrowRequest::where('status', 'pending')->count();
        $countApproved = BorrowRequest::where('status', 'approved')->count();
        $countRejected = BorrowRequest::where('status', 'rejected')->count();
        $countCompleted = BorrowRequest::where('status', 'completed')->count();

        $query = BorrowRequest::with('asset');

        if ($statusFilter !== 'all') {
            $query->where('status', $statusFilter);
        }

        $borrowRequests = $query->get();

        return view('borrow.borrowlist', compact(
            'borrowRequests', 'statusFilter',
            'countPending', 'countApproved', 'countRejected', 'countCompleted'
        ));
    }

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
    public function store(Request $request)
    {
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Validation
        $validated = $request->validate([
            'asset_id' => 'required|exists:asset_main,asset_id',
            'borrower_name' => 'required|string|max:255',
            'borrow_date' => 'required|date_format:d/m/Y',
            'return_date' => 'required|date_format:d/m/Y|after:borrow_date',
            'location' => 'required|string',
            'note' => 'nullable|string',
        ]);

        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å "DD/MM/YYYY" ‡πÄ‡∏õ‡πá‡∏ô "YYYY-MM-DD"
        $borrow_date = \Carbon\Carbon::createFromFormat('d/m/Y', $validated['borrow_date'])->format('Y-m-d');
        $return_date = \Carbon\Carbon::createFromFormat('d/m/Y', $validated['return_date'])->format('Y-m-d');

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        BorrowRequest::create([
            'asset_id' => $validated['asset_id'],
            'borrower_name' => $validated['borrower_name'],
            'borrow_date' => $borrow_date,  // üîπ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
            'return_date' => $return_date,  // üîπ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
            'location' => $validated['location'],
            'note' => $validated['note'] ?? null,
            'status' => 'pending',
        ]);

        return redirect()->route('borrowhistory')->with('success', '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    }

    public function borrowHistory(Request $request)
    {
        $query = BorrowRequest::with('asset');

        // üîç ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
        if ($request->filled('searchasset')) {
            $query->whereHas('asset', function ($q) use ($request) {
                $q->where('asset_number', 'like', "%{$request->searchasset}%")
                ->orWhere('asset_name', 'like', "%{$request->searchasset}%");
            });
        }

        // üë§ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°
        if ($request->filled('borrower_name')) {
            $query->where('borrower_name', 'like', "%{$request->borrower_name}%");
        }

        // üìÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°
        if ($request->filled('borrow_date')) {
            $query->whereDate('borrow_date', $request->borrow_date);
        }

        // üìÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô
        if ($request->filled('return_date')) {
            $query->whereDate('return_date', $request->return_date);
        }

        // ‚è≥ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° ID ‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å (asc) ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢ (desc)
        $borrowRequests = $query->orderBy('id', 'asc')->get();  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° ID

        return view('borrow.borrowhistory', compact('borrowRequests'));
    }

    // ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
    public function approve($id)
    {
        $borrow = BorrowRequest::findOrFail($id);
        $borrow->status = 'approved';
        $borrow->save();

        return back()->with('success', '‚úÖ ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!');
    }

    // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
    public function reject($id)
    {
        $borrow = BorrowRequest::findOrFail($id);
        $borrow->status = 'rejected';
        $borrow->save();

        return back()->with('error', '‚ùå ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß!');
    }

    // ‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Pending ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
     public function destroy($id)
    {
        $borrow = BorrowRequest::findOrFail($id);
        $borrow->delete();

        return redirect()->route('borrowlist')->with('success', 'üóëÔ∏è ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!');
    }

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
    public function markAsCompleted($id)
    {
        // üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        $borrow = BorrowRequest::findOrFail($id);

        // ‚ùå ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô ‡∏´‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"
        if ($borrow->status !== 'approved') {
            return back()->with('error', '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!');
        }

        // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß" ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô
        $borrow->status = 'completed';
        $borrow->return_date = now(); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        $borrow->save();

        return back()->with('success', '‚úÖ ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    }

    public function export()
    {
        return Excel::download(new BorrowExport, 'borrow_requests.xlsx');
    }
}

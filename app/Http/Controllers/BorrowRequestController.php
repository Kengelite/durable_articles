<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\BorrowRequest;
use App\Models\AssetMain;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\BorrowExport;

class BorrowRequestController extends Controller
{
    // р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Др╕│р╕гр╣Йр╕нр╕Зр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф р╕Юр╕гр╣Йр╕нр╕бр╕Хр╕▒р╕зр╕Бр╕гр╕нр╕Зр╕кр╕Цр╕▓р╕Щр╕░
    public function index(Request $request)
    {
        $assets = AssetMain::all();
        $query = BorrowRequest::with('asset');
        if ($request->filled('status')) {
            $query->where('status', $request->status);
        }
        $borrowRequests = $query->orderBy('borrow_date', 'desc')->get();

        return view('storeborrowrequest', compact('borrowRequests', 'assets'));
    }


    public function export()
    {
        return Excel::download(new BorrowExport, 'borrow_requests.xlsx');
    }

    // р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Бр╕▓р╕гр╕вр╕╖р╕бр╕Др╕гр╕╕р╕ар╕▒р╕Ур╕Ср╣М
    public function borrowList(Request $request)
    {
        $statusFilter = $request->get('status', 'all');

        $countPending = BorrowRequest::where('status', 'pending')->count();
        $countApproved = BorrowRequest::where('status', 'approved')->count();
        $countRejected = BorrowRequest::where('status', 'rejected')->count();
        $countCompleted = BorrowRequest::where('status', 'completed')->count();

        $query = BorrowRequest::with('asset');

        if ($statusFilter !== 'all') {
            $query->where('status', $statusFilter);
        }

        $borrowRequests = $query->get();

        return view('borrowlist', compact(
            'borrowRequests', 'statusFilter',
            'countPending', 'countApproved', 'countRejected', 'countCompleted'
        ));
    }

    // тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Др╕│р╕Вр╕нр╕вр╕╖р╕бр╕Др╕гр╕╕р╕ар╕▒р╕Ур╕Ср╣М
    public function store(Request $request)
    {
        // тЬЕ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Validation
        $validated = $request->validate([
            'asset_id' => 'required|exists:asset_main,asset_id',
            'borrower_name' => 'required|string|max:255',
            'borrow_date' => 'required|date_format:d/m/Y',
            'return_date' => 'required|date_format:d/m/Y|after:borrow_date',
            'location' => 'required|string',
            'note' => 'nullable|string',
        ]);

        // тЬЕ р╣Бр╕Ыр╕ер╕Зр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Ир╕▓р╕Б "DD/MM/YYYY" р╣Ар╕Ыр╣Зр╕Щ "YYYY-MM-DD"
        $borrow_date = \Carbon\Carbon::createFromFormat('d/m/Y', $validated['borrow_date'])->format('Y-m-d');
        $return_date = \Carbon\Carbon::createFromFormat('d/m/Y', $validated['return_date'])->format('Y-m-d');

        // тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕Зр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
        BorrowRequest::create([
            'asset_id' => $validated['asset_id'],
            'borrower_name' => $validated['borrower_name'],
            'borrow_date' => $borrow_date,  // ЁЯФ╣ р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Ар╕Ыр╣Зр╕Щ YYYY-MM-DD
            'return_date' => $return_date,  // ЁЯФ╣ р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Ар╕Ыр╣Зр╕Щ YYYY-MM-DD
            'location' => $validated['location'],
            'note' => $validated['note'] ?? null,
            'status' => 'pending',
        ]);

        return redirect()->route('borrowlist')->with('success', 'тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Др╕│р╕Вр╕нр╕вр╕╖р╕бр╕кр╕│р╣Ар╕гр╣Зр╕И!');
    }



    // тЬЕ р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕бр╕Шр╕нр╕Ф borrowHistory() р╣Ар╕Юр╕╖р╣Ир╕нр╣Бр╕кр╕Фр╕Зр╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕Др╕│р╕гр╣Йр╕нр╕З
    //public function borrowHistory()
    //{
    //    $borrowRequests = BorrowRequest::with('asset')->get();
    //    return view('borrowhistory', compact('borrowRequests'));
    //}

    // тЬЕ р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕бр╕Шр╕нр╕Ф borrowHistory() р╣Ар╕Юр╕╖р╣Ир╕нр╣Бр╕кр╕Фр╕Зр╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕Др╕│р╕гр╣Йр╕нр╕З р╕Юр╕гр╣Йр╕нр╕бр╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓
    public function borrowHistory(Request $request)
    {
        $query = BorrowRequest::with('asset');

        // ЁЯФН р╕Бр╕гр╕нр╕Зр╕Хр╕▓р╕бр╕лр╕бр╕▓р╕вр╣Ар╕ер╕Вр╕Др╕гр╕╕р╕ар╕▒р╕Ур╕Ср╣М р╕лр╕гр╕╖р╕н р╕Кр╕╖р╣Ир╕нр╕Др╕гр╕╕р╕ар╕▒р╕Ур╕Ср╣М
        if ($request->filled('searchasset')) {
            $query->whereHas('asset', function ($q) use ($request) {
                $q->where('asset_number', 'like', "%{$request->searchasset}%")
                ->orWhere('asset_name', 'like', "%{$request->searchasset}%");
            });
        }

        // ЁЯСд р╕Бр╕гр╕нр╕Зр╕Хр╕▓р╕бр╕Кр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╕вр╕╖р╕б
        if ($request->filled('borrower_name')) {
            $query->where('borrower_name', 'like', "%{$request->borrower_name}%");
        }

        // ЁЯУЕ р╕Бр╕гр╕нр╕Зр╕Хр╕▓р╕бр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕вр╕╖р╕б
        if ($request->filled('borrow_date')) {
            $query->whereDate('borrow_date', $request->borrow_date);
        }

        // ЁЯУЕ р╕Бр╕гр╕нр╕Зр╕Хр╕▓р╕бр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Др╕╖р╕Щ
        if ($request->filled('return_date')) {
            $query->whereDate('return_date', $request->return_date);
        }

        // тП│ р╣Ар╕гр╕╡р╕вр╕Зр╕ер╕│р╕Фр╕▒р╕Ър╕Хр╕▓р╕бр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕вр╕╖р╕бр╕Ир╕▓р╕Бр╣Гр╕лр╕бр╣Ир╣Др╕Ыр╣Ар╕Бр╣Ир╕▓
        $borrowRequests = $query->orderBy('borrow_date', 'desc')->get();

        return view('borrowhistory', compact('borrowRequests'));
    }


    // р╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤р╕Др╕│р╕гр╣Йр╕нр╕З
    public function approve($id)
    {
        $borrow = BorrowRequest::findOrFail($id);
        $borrow->status = 'approved';
        $borrow->save();

        return back()->with('success', 'тЬЕ р╕Др╕│р╕гр╣Йр╕нр╕Зр╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤р╣Бр╕ер╣Йр╕з!');
    }

    // р╕Ыр╕Пр╕┤р╣Ар╕кр╕Шр╕Др╕│р╕гр╣Йр╕нр╕З
    public function reject($id)
    {
        $borrow = BorrowRequest::findOrFail($id);
        $borrow->status = 'rejected';
        $borrow->save();

        return back()->with('error', 'тЭМ р╕Др╕│р╕гр╣Йр╕нр╕Зр╕Цр╕╣р╕Бр╕Ыр╕Пр╕┤р╣Ар╕кр╕Шр╣Бр╕ер╣Йр╕з!');
    }

    // тЬЕ **р╣Бр╕Бр╣Йр╣Др╕Вр╕Др╕│р╕гр╣Йр╕нр╕З**
    public function edit($id)
    {
        $borrow = BorrowRequest::findOrFail($id);
        $assets = AssetMain::all();

        return view('borrowedit', compact('borrow', 'assets'));

    }

    // тЬЕ **р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕Др╕│р╕гр╣Йр╕нр╕З**
    public function update(Request $request, $id)
    {

        $borrow = BorrowRequest::findOrFail($id);
        $validated = $request->validate([
            'borrower_name' => 'required|string|max:255',
            'borrow_date' => 'required|date',
            'return_date' => 'nullable|date|after:borrow_date',
            'location' => 'required|string',
            'note' => 'nullable|string',
        ]);

        $borrow->update($validated);

        return redirect()->route('borrowlist')->with('success', 'тЬЕ р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕Др╕│р╕гр╣Йр╕нр╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И!');
    }


    // тЬЕ р╕ер╕Ър╕Др╕│р╕гр╣Йр╕нр╕Зр╕Вр╕н (р╣Ар╕Йр╕Юр╕▓р╕░р╕кр╕Цр╕▓р╕Щр╕░ Pending р╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ)
     public function destroy($id)
    {
        $borrow = BorrowRequest::findOrFail($id);
        $borrow->delete();

        return redirect()->route('borrowlist')->with('success', 'ЁЯЧСя╕П р╕Др╕│р╕гр╣Йр╕нр╕Зр╕Цр╕╣р╕Бр╕ер╕Ър╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в!');
    }

    // тЬЕ р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Чр╕│р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Др╕╖р╕Щр╕Др╕гр╕╕р╕ар╕▒р╕Ур╕Ср╣М
    public function markAsCompleted($id)
    {
        // ЁЯФН р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕│р╕гр╣Йр╕нр╕Зр╕Ир╕▓р╕Бр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
        $borrow = BorrowRequest::findOrFail($id);

        // тЭМ р╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щр╕Бр╕▓р╕гр╕Др╕╖р╕Щ р╕лр╕▓р╕Бр╕кр╕Цр╕▓р╕Щр╕░р╣Др╕бр╣Ир╣Гр╕Кр╣И "р╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤"
        if ($borrow->status !== 'approved') {
            return back()->with('error', 'тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Др╕╖р╕Щр╕Др╕гр╕╕р╕ар╕▒р╕Ур╕Ср╣Мр╣Др╕Фр╣Й р╣Ар╕Юр╕гр╕▓р╕░р╕кр╕Цр╕▓р╕Щр╕░р╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З!');
        }

        // тЬЕ р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕кр╕Цр╕▓р╕Щр╕░р╣Ар╕Ыр╣Зр╕Щ "р╕Др╕╖р╕Щр╣Бр╕ер╣Йр╕з" р╣Бр╕ер╕░р╕Бр╕│р╕лр╕Щр╕Фр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Др╕╖р╕Щ
        $borrow->status = 'completed';
        $borrow->return_date = now(); // р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Др╕╖р╕Щр╣Ар╕Ыр╣Зр╕Щр╕зр╕▒р╕Щр╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
        $borrow->save();

        return back()->with('success', 'тЬЕ р╕Чр╕│р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Др╕╖р╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И!');
    }


}
